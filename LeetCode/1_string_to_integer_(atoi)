class Solution {
public:
    int myAtoi(string str) {
        if (str.length() <= 0) {
            cout << "# 1\n";
            return 0;
        }
        auto p = str.find_first_not_of(" ");
        if (p == std::string::npos) {
            cout << "# 2\n";
            return 0;
        }
        bool neg = false;
        std::string::iterator nit = str.begin() + p;
        if (!std::isdigit(str[p])) {
            if (!std::isdigit(str[p + 1])) {
                cout << "# 3\n";
                return 0;
            }
            switch (*nit) {
                case '+':
                    ++nit;
                    break;
                case '-':
                    neg = true;
                    ++nit;
                    break;
                default:
                    cout << "# 4\n";
                    return 0;
            }
        }
        
        auto m = str.find_first_of("0", nit - str.begin());
        if (m != std::string::npos) {
            auto mit = str.begin() + m + 1;
            if (mit != str.end()) {
                if (!std::isdigit(*mit)) {
                    return 0;
                }
            }
        }
        
        auto q = str.find_first_of("123456789", nit - str.begin());
        if (q == std::string::npos) {
            cout << "# 5\n"; 
            return 0;
        }
        std::string::iterator it = str.begin() + q;
        auto r = str.find_first_not_of("0123456789", it - str.begin());
        int len = str.end() - it;
        std::string::iterator vit = str.begin() + r;
        if (r != std::string::npos) {
            len = vit - it;
        }
        
        if (len > 10) {
            if (neg) {
                return INT_MIN;
            } else {
                return INT_MAX;
            }
        }
        
        auto sub = str.substr(it - str.begin(), len);
        long long sum = 0;
        for (auto it = sub.begin(); it != sub.end(); ++it, --len) {
            sum += std::pow(10, len - 1) * (*it - '0');
        }
        
        if (neg) {
            sum *= -1;
            if (sum <= INT_MIN) {
                return INT_MIN;
            } else {
                return sum;
            }
        } else {
            if (sum >= INT_MAX) {
                return INT_MAX;
            } else {
                return sum;
            }
        }
    }
};
